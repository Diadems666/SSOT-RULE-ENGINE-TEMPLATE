## Central Instructions for SSOT & Rule Engine Setup

**Objective:** This file (`./.cursor/CORE/SSOT/.ENGINE`) contains the consolidated instruction set for initiating the SSOT and Rule Engine setup in a project. It supports two distinct workflows triggered by specific phrases in the Cursor chat.

**Trigger Mechanisms:**
1.  `!! - INIT SSOT & RULE ENGINE - !!`: Used in a chat *after* providing a detailed project description. This initiates setup based on that description.
2.  `!! - ADD SSOT & RULE ENGINE - !!`: Used by itself in a chat for an existing project. This initiates setup based on comprehensive codebase analysis.

**Initialization Process (Triggered by either phrase):**

Upon receiving *either* trigger phrase, execute the instructions below. The specific steps taken in Step 2 will depend on which trigger was used.

1.  **Acknowledge Trigger & Determine Workflow:**
    * Confirm receipt of the trigger phrase (`!! - INIT SSOT & RULE ENGINE - !!` or `!! - ADD SSOT & RULE ENGINE - !!`).
    * State clearly which workflow is being initiated based on the trigger received (Initialization from Prompt or Adding to Existing Project via Analysis).

2.  **Execute Workflow-Specific Input Acquisition & SSOT Population:**

    * **IF Trigger is `!! - INIT SSOT & RULE ENGINE - !!`:**
        * **Input Source:** This workflow requires a project description provided in the chat *immediately preceding* the trigger phrase. Read back through the chat history to locate and internalize this description. The *entire* chat input received for this request (including the description, the trigger, and any surrounding text in that specific turn) is the original prompt record.
        * **SSOT Population Source:** Populate SSOT files based *solely* on the preceding project description.
        * **Action:**
            * Navigate to the `./.cursor/CORE/SSOT` directory.
            * Create a file named `.PROMPT`. **Copy the *entire* chat input you received for this request (as defined above) verbatim into this `.PROMPT` file.** This file serves as the immutable record of the project's genesis prompt.
            * Leveraging your understanding of the project description AND my "Project Setup & Initialization Trigger Handling" User Rule, automatically create and populate the core SSOT files (`.INIT`, `.HISTORY`, `.CONTINUE`, `.CONTEXT`, `.FACTS`, `.MEMORY`) based *only* on the project description found before the trigger.
            * Acknowledge that the `.PROMPT` file contains the full original source for this workflow, and other SSOT files contain the derived state from the description.

    * **ELSE IF Trigger is `!! - ADD SSOT & RULE ENGINE - !!`:**
        * **Input Source:** This workflow requires comprehensive analysis of the existing codebase. Declare that you will now perform this analysis.
        * **Action:**
            * Perform a comprehensive, recursive examination of the entire project codebase and file structure. Synthesize a thorough understanding of the project's purpose, technologies, architecture, components, dependencies, patterns, conventions, and existing documentation (as detailed in the "Project Setup & Initialization Trigger Handling" User Rule). This analysis is the source material.
            * Navigate to the `./.cursor/CORE/SSOT` directory.
            * Leveraging the comprehensive project analysis performed AND my "Project Setup & Initialization Trigger Handling" User Rule, automatically create and populate the core SSOT files (`.INIT`, `.HISTORY`, `.CONTINUE`, `.CONTEXT`, `.FACTS`, `.MEMORY`) based on the analysis findings. **Do NOT create a `.PROMPT` file for this workflow, as the codebase is the source, not a preceding chat prompt description.**
            * Acknowledge that the codebase analysis was the source for this workflow, and the SSOT files contain the derived state. Note that for this workflow, the instructions are in `.ENGINE` itself.

3.  **Create Core Directory Structure (If Missing):** Ensure the necessary directory structure exists within the project's `.cursor` directory (./.cursor/CORE/SSOT, /MCP, /RULE_ENGINE, /PROMPTS, /MEMORY). Ensure parent directories are created. Note that `./.cursor/CORE/SSOT/.ENGINE` should already exist for this step to be executed as you are reading it.

4.  **Create Legacy `.cursorrules` File (If Missing/Update):** In the project root (`./`), create `.cursorrules` if missing. Add a minimal comment pointing to `./.cursor/rules/`. If it exists, ensure the comment is present and note that modern rules are in `.mdc`.

5.  **Generate and Configure `.mdc` Project Rules:**
    * Navigate to `./.cursor/rules`.
    * Create new `.mdc` files (or update existing ones) based on the input source utilized in Step 2 (the project description for `INIT`, or the codebase analysis for `ADD`), following `999-mdc-format.mdc` and Cursor docs.
    * Use correct frontmatter (`description`, `globs`, `alwaysApply`).
    * Generate or update the following rules, tailoring their content based on the specific workflow's input source:
        * `999-mdc-format.mdc`: Guide for MDC format.
        * `00-core-system-overview.mdc`: Explain the `./.cursor/CORE` structure, mentioning `.ENGINE` as the central setup instruction file and `.PROMPT` (if created during INIT) as the original prompt record.
        * `01-ssot-interaction-guide.mdc`: Guide for interacting with SSOT files, explaining each (.ENGINE, and .PROMPT if applicable, plus others), tailored to how they were populated.
        * `02-development-workflow.mdc`: Outline the development process, emphasizing SSOT/rule use, tailored to whether the project was new (following a plan from prompt) or existing (understanding current state from analysis).
        * Project-Specific Rules: Create 2-4 rules capturing key aspects derived from the input source (description or analysis), e.g., standards, patterns, architecture details. Name descriptively, set appropriate globs.
    * Organize `.mdc` files using prefixes and subdirectories (e.g., `tasks/`).

6.  **Update Rule Index/Workflow (Self-Reference):** Create or update `010-workflow.mdc` in `./.cursor/rules/` to list the generated/updated `.mdc` rules. Review and potentially update `999-mdc-format.mdc` based on the rule generation process from the specific input source.

7.  **Final Confirmation:** State that the SSOT and Rule Engine setup is complete based on the workflow executed (INIT from prompt or ADD from analysis). List created/updated items (directories, .cursorrules, .mdc files). Confirm that the instructions for *either* setup method are recorded in `./.cursor/CORE/SSOT/.ENGINE`, and specifically for the INIT workflow, the original prompt is saved in `./.cursor/CORE/SSOT/.PROMPT`.

**Constraints & Key Behaviors:**

* This file (`.ENGINE`) is the primary instruction source for the two setup triggers.
* Strictly adhere to the directory structure in step 3.
* Input source for SSOT/MDC population depends on the trigger: preceding chat description for `!! - INIT SSOT & RULE ENGINE - !!`, codebase analysis for `!! - ADD SSOT & RULE ENGINE - !!`.
* Create and populate `.PROMPT` ONLY for the `!! - INIT SSOT & RULE ENGINE - !!` workflow, copying the *full* chat input.
* Perform comprehensive codebase analysis ONLY for the `!! - ADD SSOT & RULE ENGINE - !!` workflow, as detailed in User Rules and this file.
* Create `.mdc` files in `./.cursor/rules/` following the specified format and guidelines.
* Ensure the legacy `.cursorrules` file is handled.
* Do not proceed with development until setup is complete and confirmed.
* All future interactions must leverage SSOT files (.ENGINE, .PROMPT if applicable, and others) and .mdc rules, in conjunction with User Rules.